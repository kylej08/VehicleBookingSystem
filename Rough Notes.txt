Important
---------
2. Ensure that any references that needs to be added in the code is added in (code that was explicity copied from another source)
	a. Confirm what license stackoverflow uses
	b. See Booking.CreateBookingsTable() note where stackoverflow is used


General Notes
-------------
1. Get a list of all tables to ensure there's no unnecessary tables
2. Clean up the code (i.e remove comments, ensure code is well organised, ensure good and consistent naming, and possibly create additional methods for repetitive tasks)
	a. also clean up the code where instance variables that aren't properties, can be made properties instead
	b. is the private classes for the sorting good naming?
3. Probably won't be able to get to this, but adding it of interest: Since the modify vehicle and modify customer forms has pretty much the same methods, perhaps
a base class can be created, and then these two classes can extend it.

Issues
------
1. The DB location should be in the library and not UI
2. The columns for the list of bookings on the UI should
be the width of the "container" that it's in
4. Determine what should be done about listed bookings that has passed (should it be removed from the grid view, or maybe set the booking a particular colour?)
5. Determine what should happen (when performing a booking) if someone selects a customer and vehicle combination that MIGHT be in conflict
	e.g a previous booking (or current booking) has customer x with vehicle y. It might be a mistake (though not necessarily) that the person chose customer z with vehicle y
6. The max number of items currently for the booking drop down boxes are 8. What happens if there are more than 8 items?
7. The contact numbers can be less than 10 digits
8. Checking naming for the navigation buttons (on the navigation form)